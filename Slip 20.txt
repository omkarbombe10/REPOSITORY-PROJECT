Q1. Write a program to perform Linear Search using functions.
import java.util.Scanner;
public class A {
public static int linearSearch(int[] arr, int target) {
for (int i = 0; i < arr.length; i++) {
if (arr[i] == target) {
return i;
}
}
return -1;
}
public static void main(String[] args) {
Scanner scanner = new Scanner(System.in);
System.out.print("Enter the number of elements in the array: ");
int n = scanner.nextInt();
int[] arr = new int[n];
System.out.println("Enter the elements of the array:");
for (int i = 0; i < n; i++) {
arr[i] = scanner.nextInt();
}
System.out.print("Enter the target element to search for: ");
int target = scanner.nextInt();
int index = linearSearch(arr, target);
if (index != -1) {
System.out.println("Element found at index: " + index);
} else {
System.out.println("Element not found");
}
scanner.close();
}
}
Q2. .Write programs in Java to sort a list of n numbers in ascending order using Insertion Sort (read numbers from file)and determine its time complexity (best case, worst case, average case).
import java.io.*;
import java.util.*;
public class InsertionSort {
public static void insertionSort(int[] arr) {
int n = arr.length;
for (int i = 1; i < n; i++) {
int key = arr[i];
int j = i - 1;
while (j >= 0 && arr[j] > key) {
arr[j + 1] = arr[j];
j = j - 1;
}
arr[j + 1] = key;
}
}
public static int[] readNumbersFromFile(String filename) {
List<Integer> numbers = new ArrayList<>();
try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
String line;
while ((line = br.readLine()) != null) {
line = line.trim();
if (!line.isEmpty()) {
try {
numbers.add(Integer.parseInt(line));
} catch (NumberFormatException e) {
System.err.println("Skipping invalid number: " + line);
}
}
}
} catch (IOException e) {
e.printStackTrace();
}
int[] arr = new int[numbers.size()];
for (int i = 0; i < arr.length; i++) {
arr[i] = numbers.get(i);
}
return arr;
}
public static void printArray(int[] arr) {
for (int num : arr) {
System.out.print(num + " ");
}
System.out.println();
}

public static void main(String[] args) {
String filename = "numbers.txt";
int[] bestCaseArr = readNumbersFromFile(filename);
Arrays.sort(bestCaseArr);
long startTime = System.nanoTime();
insertionSort(bestCaseArr);
long endTime = System.nanoTime();
System.out.println("Best Case (Already sorted):");
printArray(bestCaseArr);
System.out.println("Time taken: " + (endTime - startTime) + " nanoseconds\n");
int[] worstCaseArr = readNumbersFromFile(filename);
Arrays.sort(worstCaseArr);
for (int i = 0; i < worstCaseArr.length / 2; i++) {
int temp = worstCaseArr[i];
worstCaseArr[i] = worstCaseArr[worstCaseArr.length - 1 - i];
worstCaseArr[worstCaseArr.length - 1 - i] = temp;
}
startTime = System.nanoTime();
insertionSort(worstCaseArr);
endTime = System.nanoTime();
System.out.println("Worst Case (Reverse sorted):");
printArray(worstCaseArr);
System.out.println("Time taken: " + (endTime - startTime) + " nanoseconds\n");

int[] averageCaseArr = readNumbersFromFile(filename);
startTime = System.nanoTime();
insertionSort(averageCaseArr);
endTime = System.nanoTime();
System.out.println("Average Case (Random unsorted):");
printArray(averageCaseArr);
System.out.println("Time taken: " + (endTime - startTime) + " nanoseconds\n");
}
}

