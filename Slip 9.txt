Q1. Write a program to implement BFS (Breadth First Search) and determine the time complexity for the same.
import java.util.*;
class AB {
private int V;
private List<Integer>[] adjList;
AB(int vertices) {
V = vertices;
adjList = new ArrayList[vertices];
for (int i = 0; i < vertices; i++) {
adjList[i] = new ArrayList<>();
}
}
void addEdge(int v, int w) {
adjList[v].add(w);
}
void BFS(int start) {
boolean[] visited = new boolean[V];
Queue<Integer> queue = new LinkedList<>();
visited[start] = true;
queue.offer(start);
while (!queue.isEmpty()) {
int node = queue.poll();
System.out.print(node + " ");
for (int neighbor : adjList[node]) {
if (!visited[neighbor]) {
visited[neighbor] = true;
queue.offer(neighbor);
}
}
}
}
public static void main(String[] args) {
AB g = new AB(5);
g.addEdge(0, 1);
g.addEdge(0, 2);
g.addEdge(1, 3);
g.addEdge(1, 4);
g.addEdge(2, 4);
System.out.println("BFS traversal starting from vertex 0:");
g.BFS(0);
}
}


Q2. Write a program in Java to implement Strassen"s Matrix multiplication (2X2 Matrix)
public class Srassensmat2by2 {
public static void main(String[] args) {


int[][] X = {
{2, 3},
{4, 7}
};
int[][] Y = {
{1, 2},
{3, 4}
};
int[][] Z = strassenMultiply(X, Y);
System.out.println("Resultant Matrix Z (using Strassen's method):");
for (int i = 0; i < 2; i++) {
for (int j = 0; j < 2; j++) {
System.out.print(Z[i][j] + " ");
}
System.out.println();
}
}
public static int[][] strassenMultiply(int[][] X, int[][] Y) {
int[][] Z = new int[2][2];
int A = X[0][0], B = X[0][1], C = X[1][0], D = X[1][1];
int E = Y[0][0], F = Y[0][1], G = Y[1][0], H = Y[1][1];
int P1 = A * (F - H);
int P2 = H * (A + B);
int P3 = E * (C + D);
int P4 = D * (G - E);
int P5 = (A + D) * (E + H);
int P6 = (B - D) * (G + H);
int P7 = (A - C) * (E + F);
Z[0][0] = P5 + P4 - P2 + P6;
Z[0][1] = P1 + P2;
Z[1][0] = P3 + P4;
Z[1][1] = P5 + P1 - P3 - P7;
return Z;
}
}


