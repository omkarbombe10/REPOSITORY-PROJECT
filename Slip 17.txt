Q1. Write a program to read an array from the user and find maximum and minimum numbers using the function
import java.util.Scanner;
public class A {
public static void main(String[] args) {
try (Scanner scanner = new Scanner(System.in)) {
System.out.print("Enter the size of the array: ");
int size = scanner.nextInt();
int[] array = new int[size];
System.out.println("Enter the elements of the array:");
for (int i = 0; i < size; i++) {
array[i] = scanner.nextInt();
}
int max = array[0];
int min = array[0];
for (int i = 1; i < size; i++) {
if (array[i] > max) {
max = array[i];
}
if (array[i] < min) {
min = array[i];
}
}

System.out.println("Maximum number: " + max);
System.out.println("Minimum number: " + min);
}
}
}
Q2.Write a program to perform Binary Search using functions (read numbers from file) and determine its time complexity (best case, worst case, average case)
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Arrays;
import java.util.Scanner;
public class binary {
public static int binarySearch(int[] arr, int target) {
int left = 0;
int right = arr.length - 1;
while (left <= right) {
int mid = left + (right - left) / 2;
if (arr[mid] == target) {
return mid;
}
if (arr[mid] < target) {
left = mid + 1;
} else {
right = mid - 1;
}
}
return -1;
}
public static void analyzeTimeComplexity(int[] arr) {
System.out.println("Best Case Time Complexity: O(1)");
System.out.println("Worst Case Time Complexity: O(log n)");
System.out.println("Average Case Time Complexity: O(log n)");
}
public static void main(String[] args) {
try {
Scanner fileScanner = new Scanner(new File("numbers.txt"));
int n = fileScanner.nextInt();
int[] arr = new int[n];
for (int i = 0; i < n; i++) {
arr[i] = fileScanner.nextInt();
}
fileScanner.close();
Arrays.sort(arr);
System.out.println("Sorted Array: " + Arrays.toString(arr));
Scanner scanner = new Scanner(System.in);
System.out.print("Enter the target element: ");
int target = scanner.nextInt();
int result = binarySearch(arr, target);
if (result == -1) {
System.out.println("Element not present in array");
} else {
System.out.println("Element found at index " + result);
}
analyzeTimeComplexity(arr);
} catch (FileNotFoundException e) {
System.out.println("File not found. Please make sure the numbers.txt file exists.");
}
}
}


