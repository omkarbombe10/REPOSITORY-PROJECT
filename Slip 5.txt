Q1. Write a program to perform matrix Addition using functions.
import java.util.Scanner;
public class AB {
public static void readMatrix(int[][] matrix, Scanner scanner) {
for (int i = 0; i < matrix.length; i++) {
for (int j = 0; j < matrix[0].length; j++) {
System.out.print("Enter element [" + i + "][" + j + "]: ");
matrix[i][j] = scanner.nextInt();
}
}
}
public static int[][] addMatrices(int[][] matrix1, int[][] matrix2) {
int rows = matrix1.length;
int cols = matrix1[0].length;
int[][] result = new int[rows][cols];
for (int i = 0; i < rows; i++) {
for (int j = 0; j < cols; j++) {
result[i][j] = matrix1[i][j] + matrix2[i][j];
}
}
return result;
}
public static void displayMatrix(int[][] matrix) {
System.out.println("Matrix:");
for (int[] row : matrix) {
for (int value : row) {
System.out.print(value + "\t");
}
System.out.println();
}
}
public static void main(String[] args) {
Scanner scanner = new Scanner(System.in);
System.out.print("Enter number of rows: ");
int rows = scanner.nextInt();
System.out.print("Enter number of columns: ");
int cols = scanner.nextInt();
int[][] matrix1 = new int[rows][cols];
int[][] matrix2 = new int[rows][cols];
System.out.println("Enter elements for Matrix 1:");
readMatrix(matrix1, scanner);
System.out.println("Enter elements for Matrix 2:");
readMatrix(matrix2, scanner);
int[][] result = addMatrices(matrix1, matrix2);
System.out.println("Result of Matrix Addition:");
displayMatrix(result);
}
}


Q2. Write programs in Java to sort a list of n numbers in ascending order using Insertion Sort (read numbers from file)and determine its time complexity (best case, worst case, average case).
import java.io.*;
import java.util.*;
public class InsertionSortFromFile {
public static void main(String[] args) {
List<Integer> numbers = new ArrayList<>();
try (Scanner scanner = new Scanner(new File("numbers.txt"))) {
while (scanner.hasNextInt()) {
numbers.add(scanner.nextInt());
}
} catch (FileNotFoundException e) {
System.out.println("File not found. Please make sure input.txt exists.");
return;
}
int[] arr = numbers.stream().mapToInt(i -> i).toArray();
long startTime = System.nanoTime();
insertionSort(arr);
long endTime = System.nanoTime();
System.out.println("Time taken for input file sort: " + (endTime - startTime) + " ns");
System.out.println("Sorted Array:");
for (int num : arr) {
System.out.print(num + " ");
}
System.out.println();
int[] bestCase = arr.clone();
startTime = System.nanoTime();
insertionSort(bestCase);
endTime = System.nanoTime();
System.out.println("Best Case (sorted input) Time: " + (endTime - startTime) + " ns");
int[] worstCase = reverseArray(arr.clone());
startTime = System.nanoTime();
insertionSort(worstCase);
endTime = System.nanoTime();
System.out.println("Worst Case (reverse input) Time: " + (endTime - startTime) + " ns");
int[] averageCase = shuffleArray(arr.clone());
startTime = System.nanoTime();
insertionSort(averageCase);
endTime = System.nanoTime();
System.out.println("Average Case (random input) Time: " + (endTime - startTime) + " ns");
}
public static void insertionSort(int[] arr) {
int n = arr.length;
for (int i = 1; i < n; ++i) {
int key = arr[i];
int j = i - 1;
while (j >= 0 && arr[j] > key) {
arr[j + 1] = arr[j];
j--;
}
arr[j + 1] = key;
}
}
public static int[] reverseArray(int[] arr) {
for (int i = 0; i < arr.length / 2; i++) {
int temp = arr[i];
arr[i] = arr[arr.length - i - 1];
arr[arr.length - i - 1] = temp;
}
return arr;
}
public static int[] shuffleArray(int[] arr) {
Random rand = new Random();
for (int i = arr.length - 1; i > 0; i--) {
int index = rand.nextInt(i + 1);
int temp = arr[index];
arr[index] = arr[i];
arr[i] = temp;
}
return arr;
}
}
