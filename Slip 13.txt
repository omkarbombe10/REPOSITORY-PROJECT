Q1. Write a program to read a 3X3 matrix from the user and print its row, column and diagonal sum using functions .
import java.util.Scanner;
public class KnapsackProblem {
public static void readMatrix(int[][] matrix, Scanner sc) {
System.out.println("Enter the elements of the 3x3 matrix:");
for (int i = 0; i < 3; i++) {
for (int j = 0; j < 3; j++) {
System.out.print("Element [" + (i+1) + "][" + (j+1) + "]: ");
matrix[i][j] = sc.nextInt();
}
}
}
public static void rowSums(int[][] matrix) {
System.out.println("\nRow sums:");
for (int i = 0; i < 3; i++) {
int sum = 0;
for (int j = 0; j < 3; j++) {
sum += matrix[i][j];
}
System.out.println("Sum of row " + (i+1) + " = " + sum);
}
}

public static void columnSums(int[][] matrix) {
System.out.println("\nColumn sums:");
for (int j = 0; j < 3; j++) {
int sum = 0;
for (int i = 0; i < 3; i++) {
sum += matrix[i][j];
}
System.out.println("Sum of column " + (j+1) + " = " + sum);
}
}
public static void diagonalSums(int[][] matrix) {
int mainDiagonal = 0, secondaryDiagonal = 0;
for (int i = 0; i < 3; i++) {
mainDiagonal += matrix[i][i];
secondaryDiagonal += matrix[i][2 - i];
}
System.out.println("\nDiagonal sums:");
System.out.println("Main diagonal sum = " + mainDiagonal);
System.out.println("Secondary diagonal sum = " + secondaryDiagonal);
}
public static void main(String[] args) {
Scanner sc = new Scanner(System.in);
int[][] matrix = new int[3][3];
readMatrix(matrix, sc);
rowSums(matrix);
columnSums(matrix);
diagonalSums(matrix);
sc.close();
}
}
Q2. Write a Java Program to implement Optimal Merge Pattern
import java.util.PriorityQueue;
public class KnapsackProblem
{
public static int Optimal(int[] files) {
PriorityQueue<Integer> FS = new PriorityQueue<>();
for (int file : files) {
FS.add(file);
}
int totalCost = 0;
while (FS.size() > 1) {
int x1 = FS.poll();
int x2 = FS.poll();
int LST = x1 + x2;
totalCost += LST;
FS.add(LST);
}
return totalCost;
}

public static void main(String[] args) {
int[] files = {5,10,20,30,30};
int cost = Optimal(files);
System.out.println("The Answer: " + cost);
}
}

