Q1.Write a program to implement DFS (Depth First Search) and determine the time complexity for the same.
import java.util.*;
public class AB {
static class Graph {
private int V;
private List<Integer>[] adjList;
Graph(int vertices) {
V = vertices;
adjList = new ArrayList[vertices];
for (int i = 0; i < vertices; i++) {
adjList[i] = new ArrayList<>();
}
}
void addEdge(int v, int w) {
adjList[v].add(w);
}
void DFS(int start) {
boolean[] visited = new boolean[V];
DFSUtil(start, visited);
}
private void DFSUtil(int v, boolean[] visited) {
visited[v] = true;
System.out.print(v + " ");
for (int neighbor : adjList[v]) {
if (!visited[neighbor]) {
DFSUtil(neighbor, visited);
}
}
}
}
public static void main(String[] args) {
Graph g = new Graph(5);
g.addEdge(0, 1);
g.addEdge(0, 2);
g.addEdge(1, 3);
g.addEdge(1, 4);
System.out.println("DFS traversal starting from vertex 0:");
g.DFS(0);
}
}


Q2. Write programs in Java to sort a list of n numbers in ascending order using Heap Sort and determine its time complexity (best case, worst case, average case)
import java.util.Scanner;
public class LinearSearchFromFile {
public void sort(int[] arr) {
int n = arr.length;
for (int i = n / 2 - 1; i >= 0; i--)
heapify(arr, n, i);
for (int i = n - 1; i > 0; i--) {
int temp = arr[0];
arr[0] = arr[i];
arr[i] = temp;
heapify(arr, i, 0);
}
}
void heapify(int[] arr, int n, int i) {
int largest = i;
int left = 2 * i + 1;
int right = 2 * i + 2;
if (left < n && arr[left] > arr[largest])
largest = left;
if (right < n && arr[right] > arr[largest])
largest = right;
if (largest != i) {
int swap = arr[i];
arr[i] = arr[largest];
arr[largest] = swap;
heapify(arr, n, largest);
}
}
static void printArray(int[] arr) {
for (int num : arr)
System.out.print(num + " ");
System.out.println();
}
public static void main(String[] args) {
try (Scanner scanner = new Scanner(System.in)) {
System.out.print("Enter number of elements: ");
int n = scanner.nextInt();
int[] arr = new int[n];
System.out.println("Enter the elements:");
for (int i = 0; i < n; i++)
arr[i] = scanner.nextInt();
HeapSort sorter = new HeapSort();
sorter.sort(arr);
System.out.println("\nSorted array:");
printArray(arr);
}
System.out.println("\nTime Complexity:");
System.out.println("Best Case    : O(n log n)");
System.out.println("Average Case : O(n log n)");
System.out.println("Worst Case   : O(n log n)");
}
}

